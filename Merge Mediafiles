#!/bin/bash

# Strenges Fehler-Handling
set -o errexit -o nounset -o pipefail

LOGFILE="/tmp/nautilus_merge_ffmpeg.log"
exec >>"$LOGFILE" 2>&1

echo "---- $(date) start ----"

# --- Abhängigkeiten prüfen (GUI/CLI-Fallback) -------------------------------------------------
need_cmds=("ffmpeg" "yad")
missing=()
for c in "${need_cmds[@]}"; do
  if ! command -v "$c" >/dev/null 2>&1; then
    missing+=("$c")
  fi
done

if [ ${#missing[@]} -gt 0 ]; then
  rpmfusion_hint=""
  if printf '%s\n' "${missing[@]}" | grep -q '^ffmpeg$'; then
    rpmfusion_hint="\nHinweis (Fedora): ffmpeg ist i. d. R. in RPM Fusion. Aktivierung: \n  sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm\n  sudo dnf install -y ffmpeg"
  fi
  msg="Fehlende Abhängigkeiten: ${missing[*]}\n\nInstallation (Fedora):\n  sudo dnf install -y ${missing[*]}${rpmfusion_hint}"
  if command -v yad >/dev/null 2>&1; then
    yad --title="Abhängigkeiten fehlen" --text="$msg" --button=gtk-ok:0 --center || true
  elif command -v zenity >/dev/null 2>&1; then
    zenity --info --title="Abhängigkeiten fehlen" --text="$msg" || true
  elif command -v notify-send >/dev/null 2>&1; then
    notify-send "Abhängigkeiten fehlen" "$msg"
  else
    echo "$msg" >&2
  fi
  exit 1
fi

# --- Eingaben von Nautilus --------------------------------------------------------------------
: "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS:-}"
if [ -z "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS:-}" ]; then
  (command -v yad >/dev/null 2>&1 && yad --image=dialog-error --text="Keine Dateien ausgewählt." --button=gtk-ok:0 --center) || echo "Keine Dateien ausgewählt." >&2
  exit 1
fi

# Roh-Liste säubern (leere Zeilen entfernen)
FILES_RAW=$(printf '%s\n' "${NAUTILUS_SCRIPT_SELECTED_FILE_PATHS}" | sed '/^$/d')

FIRST_FILE=$(printf '%s\n' "${FILES_RAW}" | head -n 1)
DIRNAME=$(dirname "${FIRST_FILE}")
EXTENSION_RAW="${FIRST_FILE##*.}"
EXTENSION="${EXTENSION_RAW,,}"   # in Kleinbuchstaben

# Basename ohne _NNN
BASENAME=$(basename "${FIRST_FILE}" | sed -E 's/_[0-9]{3}\.[^.]+$//')
TIMESTAMP=$(stat -c %y "${FIRST_FILE}" | cut -d' ' -f1)
OUTPUT_FILE="${BASENAME}_${TIMESTAMP}.${EXTENSION}"

# Sortieren (natürliche/versionsartige Sortierung)
SORTED_FILES=$(printf '%s\n' "${FILES_RAW}" | sort -V)

echo "FIRST_FILE=$FIRST_FILE"
echo "DIRNAME=$DIRNAME"
echo "EXTENSION=$EXTENSION"
echo "OUTPUT_FILE=$OUTPUT_FILE"

# Übersicht der Reihenfolge
if command -v yad >/dev/null 2>&1; then
  yad --title="Zusammenfügen bestätigen" \
      --text="Die folgenden Dateien werden in dieser Reihenfolge zusammengefügt:" \
      --list --column="Dateien" $(printf '%s ' ${SORTED_FILES@Q}) \
      --button=gtk-cancel:1 --button=gtk-ok:0 || exit 1
fi

# Speicherplatz berechnen (KB), robust gegen Leerzeichen
REQUIRED_SPACE=0
while IFS= read -r f; do
  sz=$(du -k -- "${f}" | awk '{print $1}')
  REQUIRED_SPACE=$((REQUIRED_SPACE + sz))
done <<< "${SORTED_FILES}"
AVAILABLE_SPACE=$(df -Pk -- "${DIRNAME}" | awk 'END{print $4}')

echo "REQUIRED_SPACE=${REQUIRED_SPACE} KB, AVAILABLE_SPACE=${AVAILABLE_SPACE} KB"

if [ "${AVAILABLE_SPACE}" -lt "${REQUIRED_SPACE}" ]; then
  (command -v yad >/dev/null 2>&1 && yad --image=dialog-error --button=gtk-ok:0 --center --text="Nicht genügend Speicherplatz verfügbar!") || echo "Nicht genügend Speicherplatz." >&2
  exit 1
fi

cd "${DIRNAME}"

# ffmpeg-Listendatei erzeugen (leere Zeilen vermeiden)
LIST_FILE=$(mktemp)
while IFS= read -r line; do
  [ -n "$line" ] || continue
  printf "file '%s'\n" "$line" >> "${LIST_FILE}"
done <<< "${SORTED_FILES}"

echo "LIST_FILE at ${LIST_FILE}:"
cat "${LIST_FILE}"

# Test: Stream Copy möglich?
NEED_REENCODE=0
if ffmpeg -hide_banner -v error -f concat -safe 0 -i "${LIST_FILE}" -c copy -t 0.1 -f null - </dev/null 2>/dev/null; then
  NEED_REENCODE=0
else
  NEED_REENCODE=1
fi

echo "NEED_REENCODE=$NEED_REENCODE"

# Nutzer fragen, wenn Re-Encode nötig
if [ "${NEED_REENCODE}" -eq 1 ]; then
  yad --title="Neukodierung erforderlich" --text="Die Dateien müssen neukodiert werden. Fortfahren?" --button=gtk-no:1 --button=gtk-yes:0 || { rm -f "${LIST_FILE}"; exit 1; }
fi

# Fortschritts-UI via FIFO
PROG_FIFO=$(mktemp -u)
mkfifo "$PROG_FIFO"

yad --progress --pulsate --no-cancel --auto-close --title="Zusammenfügen läuft" --text="# Bitte warten..." < "$PROG_FIFO" &
YAD_PID=$!
echo "YAD_PID=$YAD_PID"

set +e
FF_ERR=0
if [ "${NEED_REENCODE}" -eq 1 ]; then
  case "${EXTENSION}" in
    mp4|mov|mkv)
      ffmpeg -y -f concat -safe 0 -i "${LIST_FILE}" -c:v libx264 -preset fast -crf 23 -c:a aac "${OUTPUT_FILE}" || FF_ERR=$?
      ;;
    mp3|aac|ogg)
      ffmpeg -y -f concat -safe 0 -i "${LIST_FILE}" -c:a libmp3lame "${OUTPUT_FILE}" || FF_ERR=$?
      ;;
    wav|flac)
      ffmpeg -y -f concat -safe 0 -i "${LIST_FILE}" -c:a flac "${OUTPUT_FILE}" || FF_ERR=$?
      ;;
    *)
      ffmpeg -y -f concat -safe 0 -i "${LIST_FILE}" -c copy "${OUTPUT_FILE}" || FF_ERR=$?
      ;;
  esac
else
  ffmpeg -y -f concat -safe 0 -i "${LIST_FILE}" -c copy "${OUTPUT_FILE}" || FF_ERR=$?
fi

{
  echo 100
  echo "# Fertig."
} > "$PROG_FIFO"

rm -f "$PROG_FIFO" "${LIST_FILE}"

if [ "$FF_ERR" -ne 0 ]; then
  echo "ffmpeg exit code: $FF_ERR"
  (command -v yad >/dev/null 2>&1 && yad --image=dialog-error --text="Fehler beim Zusammenfügen (Code $FF_ERR).\nSiehe Log: $LOGFILE" --button=gtk-ok:0 --center) || echo "Fehler beim Zusammenfügen (Code $FF_ERR). Siehe Log: $LOGFILE" >&2
  exit $FF_ERR
else
  (command -v yad >/dev/null 2>&1 && yad --image=dialog-information --text="Erfolg: ${OUTPUT_FILE}" --button=gtk-ok:0 --center) || echo "Erfolg: ${OUTPUT_FILE}"
fi

echo "---- $(date) end ----"
